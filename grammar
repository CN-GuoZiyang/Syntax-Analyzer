P -> P'
P' -> common commons
commons -> common commons
commons -> ε
common -> type ID after_part
common -> STRUCT ID struct_body ;
struct_body -> { struct_define struct_defines }
struct_defines -> struct_define struct_defines
struct_defines -> ε
struct_define -> type ID array_part ;
array_part -> [ const ]
array_part -> ε
after_part -> ( args ) func_body
after_part -> init vars ;
type -> INT
type -> SHORT
type -> LONG
type -> FLOAT
type -> DOUBLE
type -> VOID
type -> CHAR
type -> UNSIGNED type
args -> type ID arg
args -> ε
arg -> , type ID arg
arg -> ε
func_body -> ;
func_body -> block
block -> { define_stmts stmts }
define_stmts -> define_stmt define_stmts
define_stmts -> ε
define_stmt -> type ID init vars ;
define_stmt -> STRUCT ID ID ;
init -> = expression
init -> array_part
init -> ε
vars -> , ID init vars
vars -> ε
stmts -> stmt stmts
stmts -> ε
stmt -> assign_stmt
stmt -> jump_stmt
stmt -> iteration_stmt
stmt -> if_stmt
stmt -> switch_stmt
stmt -> void_call_stmt
assign_stmt -> expression ;
jump_stmt -> CONTINUE ;
jump_stmt -> BREAK ;
jump_stmt -> RETURN isnull_expr ;
iteration_stmt -> WHILE ( logical_expression ) block
iteration_stmt -> FOR ( isnull_expr ; isnull_expr ; isnull_expr ) block
iteration_stmt -> DO block WHILE ( logical_expression ) ;
if_stmt -> IF ( logical_expression ) block result
result -> ELSE after_else
result -> ε
after_else -> block
after_else -> if_stmt
switch_stmt -> SWITCH ( value ) { case_stmt case_stmts default_stmt }
case_stmts -> case_stmt case_stmts
case_stmts -> ε
case_stmt -> CASE const : stmts
default_stmt -> DEFAULT : stmts
default_stmt -> ε
logical_expression -> ! expression bool_expression
logical_expression -> expression bool_expression
bool_expression -> lop expression bool_expression
bool_expression -> ε
lop -> &&
lop -> ||
isnull_expr -> expression
isnull_expr -> ε
expression -> value operation
operation -> compare_op value
operation -> equal_op value
operation -> ++
operation -> --
operation -> ε
compare_op -> >
compare_op -> >=
compare_op -> <
compare_op -> <=
compare_op -> ==
compare_op -> !=
equal_op -> =
value -> item value'
value' -> + item value'
value' -> - item value'
value' -> ε
item -> factor item'
item' -> * factor item'
item' -> / factor item'
item' -> % factor item'
item' -> ε
factor -> ( value )
factor -> ID factor'
factor -> const
factor' -> array_part
factor' -> call_func
factor' -> DOT ID
factor' -> ε
call_func -> ( es )
es -> expression eps
es -> ε
eps -> , expression eps
eps -> ε
const -> OCT
const -> DECIMAL
const -> HEX
const -> STRING
const -> CHARACTER